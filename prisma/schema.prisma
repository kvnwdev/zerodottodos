// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    tasks         Task[]
    completedDays CompletedDay[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Task model for the task management functionality
model Task {
    id          String    @id @default(cuid())
    content     String
    status      String    @default("SOON") // SOON, NOW, HOLD, COMPLETED
    isImportant Boolean   @default(false)
    position    Int       @default(0)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    completedAt DateTime?
    
    user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    completedDay CompletedDay? @relation(fields: [completedDayId], references: [id])
    completedDayId String?

    @@index([userId, status])
    @@index([completedDayId])
}

// CompletedDay model for tracking completed days
model CompletedDay {
    id        String   @id @default(cuid())
    date      DateTime
    note      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    tasks   Task[]

    @@unique([userId, date])
    @@index([userId])
}

// Enum for task status
enum TaskStatus {
    SOON
    NOW
    HOLD
}
